"use strict";

exports.__esModule = true;

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _OutgoingMessage = require("./OutgoingMessage");

var _OutgoingMessage2 = _interopRequireDefault(_OutgoingMessage);

var _IncomingMessage = require("./IncomingMessage");

var _IncomingMessage2 = _interopRequireDefault(_IncomingMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @param {Object} context Azure Function native context object
 * @throws {Error}
 * @private
 */
function assertContext(context) {
  if (!context) {
    throw new Error("context is null or undefined");
  }

  if (!context.bindings) {
    throw new Error("context.bindings is null or undefined");
  }

  if (!context.bindings.req) {
    throw new Error("context.bindings.req is null or undefined");
  }

  if (!context.bindings.req.originalUrl) {
    throw new Error("context.bindings.req.originalUrl is null or undefined");
  }
}

/**
 * Express adapter allowing to handle Azure Function requests by wrapping in request events.
 *
 * @class
 * @fires request
 */

var ExpressAdapter = function (_EventEmitter) {
  _inherits(ExpressAdapter, _EventEmitter);

  /**
   * @param {Object=} requestListener Request listener (typically an express/connect instance)
   */
  function ExpressAdapter(requestListener) {
    _classCallCheck(this, ExpressAdapter);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    if (requestListener !== undefined) {
      _this.addRequestListener(requestListener);
    }
    return _this;
  }

  /**
   * Adds a request listener (typically an express/connect instance).
   *
   * @param {Object} requestListener Request listener (typically an express/connect instance)
   */


  ExpressAdapter.prototype.addRequestListener = function addRequestListener(requestListener) {
    this.addListener("request", requestListener);
  };

  /**
   * Handles Azure Function requests.
   *
   * @param {Object} context Azure context object for a single request
   */


  ExpressAdapter.prototype.handleAzureFunctionRequest = function handleAzureFunctionRequest(context) {
    assertContext(context);

    // 1. Context basic initialization
    context.res = context.res || {};

    // 2. Wrapping
    var req = new _IncomingMessage2.default(context);
    var res = new _OutgoingMessage2.default(context);

    // 3. Synchronously calls each of the listeners registered for the event
    this.emit("request", req, res);
  };

  /**
   * Create function ready to be exposed to Azure Function for request handling.
   *
   * @returns {function(context: Object)} Azure Function handle
   */


  ExpressAdapter.prototype.createAzureFunctionHandler = function createAzureFunctionHandler() {
    return this.handleAzureFunctionRequest.bind(this);
  };

  return ExpressAdapter;
}(_events2.default);

exports.default = ExpressAdapter;
module.exports = exports["default"];